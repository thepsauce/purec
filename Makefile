# Compiler flags
DEBUG_FLAGS := -g -fsanitize=address
C_FLAGS := -std=gnu99 -Wall -Wextra -Wpedantic -Werror
RELEASE_FLAGS := -O3

# Libraries
C_LIBS := -lncursesw

# Input
SRC := src

# Output
RUN := purec
OUT := build
RELEASE := release

# Find all source files
SOURCES := $(shell find $(SRC) -name '*.c')
# Get all corresponding object paths
OBJECTS := $(patsubst $(SRC)/%.c,$(OUT)/%.o,$(SOURCES))

# Get dependencies
DEPENDENCIES := $(patsubst %.o,%.d,$(OBJECTS))

# Include dependencies (.d files) generated by gcc
-include $(DEPENDENCIES)
# Build each object from corresponding source file
$(OUT)/%.o: $(SRC)/%.c
	mkdir -p $(dir $@)
	gcc $(DEBUG_FLAGS) $(C_FLAGS) -c $< -o $@ -MMD

# Build the main executable from all object files
$(OUT)/$(RUN): $(OBJECTS)
	mkdir -p $(dir $@)
	gcc $(DEBUG_FLAGS) $(C_FLAGS) $(OBJECTS) -o $@ $(C_LIBS)

# Functions
.PHONY:
build: $(OUT)/$(RUN)

.PHONY:
run: build
	./$(OUT)/$(RUN)

.PHONY:
release:
	mkdir -p $(RELEASE)
	gcc $(RELEASE_FLAGS) $(C_FLAGS) $(SOURCES) -o $(RELEASE)/$(RUN) $(C_LIBS)

.PHONY:
clean:
	rm -rf $(OUT)
	rm -rf $(RELEASE)

